{
  "_args": [
    [
      {
        "name": "helios",
        "raw": "helios",
        "rawSpec": "",
        "scope": null,
        "spec": "latest",
        "type": "tag"
      },
      "/Users/stellan/slask/KDS/microservices/indexService"
    ]
  ],
  "_from": "helios@latest",
  "_id": "helios@0.0.5",
  "_inCache": true,
  "_installable": true,
  "_location": "/helios",
  "_npmUser": {
    "email": "rishabhmhjn@gmail.com",
    "name": "rishabhmhjn"
  },
  "_npmVersion": "1.3.10",
  "_phantomChildren": {},
  "_requested": {
    "name": "helios",
    "raw": "helios",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/helios/-/helios-0.0.5.tgz",
  "_shasum": "631f1a67a9c80439b0025e334c73064c13aceca1",
  "_shrinkwrap": null,
  "_spec": "helios",
  "_where": "/Users/stellan/slask/KDS/microservices/indexService",
  "author": {
    "name": "Rishabh Mahajan"
  },
  "bugs": {
    "email": "rishabhmhjn@gmail.com",
    "url": "https://github.com/rishabhmhjn/helios/issues"
  },
  "dependencies": {
    "underscore": "*"
  },
  "description": "SOLR client for Nodejs",
  "devDependencies": {
    "nlogger": "*",
    "nodeunit": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "631f1a67a9c80439b0025e334c73064c13aceca1",
    "tarball": "https://registry.npmjs.org/helios/-/helios-0.0.5.tgz"
  },
  "homepage": "https://github.com/rishabhmhjn/helios#readme",
  "keywords": [
    "solr"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "email": "rishabhmhjn@gmail.com",
      "name": "rishabhmhjn"
    }
  ],
  "name": "helios",
  "optionalDependencies": {},
  "readme": "helios - a nodejs-solr client [![Build Status](https://travis-ci.org/rishabhmhjn/helios.png)](https://travis-ci.org/rishabhmhjn/helios)\n=============================\nWell, this is a little neater version of the already available nodejs-solr clients.\nI figured out that a lot of problems lies in creating queries and documents.\nThe powerful thing of this library would be the `queryBuilder` & `document` class.\n\nDownload\n-------\nReleases are available for download from [GitHub](https://github.com/rishabhmhjn/helios/).\nAlternatively, you can install using Node Package Manager (npm) as [helios](https://npmjs.org/package/helios):\n\n    npm install helios\n\n\nSimple Execution\n--------------\n\n```js\nvar helios = require('helios')\nvar solr_client = new helios.client({\n  host : 'localhost', // Insert your client host\n  port : 8989,\n  path : '/solr', // Insert your client solr path\n  timeout : 1000  // Optional request timeout\n});\n\nvar queryBuilder = new helios.queryBuilder();\n\nsolr_client.select(queryBuilder.simpleQuery({\n  op : 'OR',\n  df : 'field_name',\n  q : 'keyword1 keyword2'\n}), function(err, res) {\n  if (err) console.log(err);\n  console.log(JSON.parse(res)); // yes, it returns in raw format, you need to JSON.parse it\n});\n```\n\nDocumentation\n-------------\n---------------------------------------\n\n### [helios.queryBuilder](#queryBuilder)\n### [helios.client](#client)\n### [helios.document](#document)\n\n---------------------------------------\n\n<a name=\"queryBuilder\" />\n## helios.queryBuilder\n### init\n```js\nvar queryBuilder = new Helios.queryBuilder();\n```\n### methods\nAll the methods can be used together and can be get as a combined query string by using the `toString()` method\n\n#### simpleQuery\n```js\nqueryBuilder.simpleQuery({\n  op : 'OR',\n  df : 'field_name',\n  q : 'keyword1 keyword2'\n})\n```\n\n#### facetQuery\n```js\nqueryBuilder.facetQuery({\n  'facet' : 'true',\n  'facet.date' : 'timestamp',\n  'facet.date.start' : 'NOW/DAY-5DAYS',\n  'facet.date.end' : 'NOW/DAY+1DAY',\n  'facet.date.gap' : '+1DAY'\n});\n```\n\n#### toString\nIt just returns the query you have made as a `string`\n\n<a name=\"client\" />\n## helios.client\n### init\nIt can be initialized by `helios.client()` or by passing an `options` Object as an argument like `helios.client(options)`.\n```js\ntry {\n  var solr_client = new helios.client({\n    host : 'localhost', // Insert your client host\n    port : 8983,\n    path : '/solr' // Insert your client solr path\n  });\ncatch (e) {\n  console.log(e);\n}\n```\n`options` can have\n- `host`\n- `port`\n- `path`\n- `proxy : { host : \"proxy_host\", port : 55 }`\n- `timeout : 10000` in milliseconds\n\n### methods\n\n#### solr_client.select\nIt accepts two arguments:\n- query string OR query object OR an instance of `helios.queryBuilder`\n- callback (err, res)\n\n```js\nsolr_client.select({\n  q : \"field_name:value\",\n  rows : 25,\n  start : 50\n  // and so on\n}, function(err, res) {\n  if (err) console.log(err);\n  var result = JSON.parse(res); // told you, you have to JSON.parse the res\n});\n```\n\n#### solr_client.addDoc\nIt accepts 3 arguments:\n- `solrdoc` : an instance of [helios.document](#document)\n- `commit_flag` : `boolean`\n- `callback(err)` : a callback which is given an error message upon failure\n\n```js\nvar solrdoc = new helios.document();\nsolrdoc.addField('field_name1', 'value1');\nsolrdoc.addField('field_name2', 'value2');\n\nsolr_client.addDoc(solrdoc, true, function(err) {\n  if (err) console.log(err);\n});\n```\n\n#### solr_client.updateDoc - For Solr 4.x\nIt accepts 3 arguments:  \n- `solrdoc` : an instance of [helios.document](#document)  \n- `commit_flag` : `boolean`  \n- `callback(err)` : a callback which is given an error message upon failure  \n\nNOTES: Use 'set' when you want to update a field value and use 'add' for add a value to multivalue fields. \n\n```js\nvar solrdoc = new helios.document();\n// update the field_name2\nsolrdoc.setField('field_name2', 'value1updated', null, 'set');\n// add the field_name3\nsolrdoc.setField('field_name3', 'value3', null, 'add');\n// add the field_name4 with boost=1\nsolrdoc.setField('field_name4', 'value4', 1 /*boost*/, 'set');\n\nsolr_client.updateDoc(solrdoc, true, function(err) {\n  if (err) console.log(err);\n});\n\nOr equivalent:\n\nvar solrdoc = new helios.document();\n// update the field_name2\nsolrdoc.setField('field_name2', 'value1updated');\n// add the field_name3\nsolrdoc.setField('field_name3', 'value3');\n// add the field_name4 with boost=1\nsolrdoc.setField('field_name4', 'value4');\n\n// setting the updates and boost\ndoc.setFieldUpdate('field_name2', 'set');\ndoc.setFieldUpdate('field_name3', 'add');\ndoc.setFieldUpdate('field_name4', 'set');\ndoc.setFieldBoost('field_name4', 1);\n\nsolr_client.updateDoc(solrdoc, true, function(err) {\n  if (err) console.log(err);\n});\n```\n\n```js\nvar solrdoc = new helios.document();\n// delete the field_name4\ndoc.setFieldDelete('field_name4');\n\nsolr_client.updateDoc(solrdoc, true, function(err) {\n  if (err) console.log(err);\n});\n```\n\n\n#### solr_client.deleteDoc - For Solr 4.x\nIt accepts 4 arguments:  \n- `id` : The Solr document id. This is defined in the schema.\n- `values` : The list of documents to delete. This could be a string or an array of strings. \n- `commit_flag` : `boolean`\n- `callback(err)` : a callback which is given an error message upon failure  \n\n```js\nvar solrdoc = new helios.document();\n\n// delete the document with id=1\nsolr_client.deleteDoc('id', '1' true, function(err) {\n  if (err) console.log(err);\n});\n\n// delete the documents with id=2, id=3 and id=4\nsolr_client.deleteDoc('id', ['2', '3', '4'], true, function(err) {\n  if (err) console.log(err);\n});\n```\n\n#### solr_client.deleteDocByQuery - For Solr 4.x\nIt accepts 4 arguments:  \n- `query` : The \"deleteDocByQuery\" uses the Lucene query parser by default. Please refer to Solr documentation for more details.\n- `commit_flag` : `boolean`\n- `maxAffected` : Before to delete the docs deleteDocByQuery will check how many docs will be deleted. If this is greather than the the maxAffected value the method will stop. Set this value to 0 if you want to delete all the docs affected by the query.\n- `callback(err)` : a callback which is given an error message upon failure  \n\n```js\nvar solrdoc = new helios.document();\n\n// delete all the documents where name = 'Peter' and cancel the delete if there are are more than 18 documents.\nsolr_client.deleteDocByQuery('name:Peter', commit, 18, function(err) {\n  if(err) {\n    console.log('error: ', err);\n  } else {\n    console.log('Documents deleted!');\n  }\n});\n\n// delete ALL the documents where name = 'Peter' (Be careful when setting maxAffected to 0, you could delete your whole database when query=*:*)\nsolr_client.deleteDocByQuery('name:Peter', commit, 0, function(err) {\n  if(err) {\n    console.log('error: ', err);\n  } else {\n    console.log('Documents deleted!');\n  }\n});\n```\n\n<a name=\"document\" />\n## helios.document\nThis class will ease the steps required to make a document to be added to solr.\n\n### init\n```js\nvar solr_doc = new helios.document();\n```\n\n### methods\n#### getBoost()\nThis returns the `document`'s boost\n\n#### setBoost\nThis sets the `document`'s boost to a given `float`\n```js\nsolr_doc.setBoost(2.112);\n```\n\n#### setMultiValue\nIt accepts the following arguments:\n- `field_name`\n- `value` the value of the `field_name`\n- `boost` the boost to be set for `field_name`\n\nThis method is helpful in adding values to a `multi=true` field\n```js\nsolr_doc.setMultiValue('field_name', 'value1', 2);\nsolr_doc.setMultiValue('field_name', 'value2', 1.5);\n```\n> note that adding boost every time in the `setMultiValue`\n> for the same `field_name` actually results in a compound\n> value which is the multiplication of the boosts added\n> eg. for the above case: `2 * 1.5 = 3`\n\n#### getField\nThis method returns the value set for `field_name`\n```js\nsolr_doc.getField('field_name');\n```\n\n\n#### setField\nThis methods adds `field_name` whose value is `value` and boost is `boost`.\n```js\nsolr_doc.setField('field_name1', 'value1', 1.21);\nsolr_doc.setField('field_name2', 2121);\n```\n\n\n#### getFieldBoost\nThis method returns the boost of `field_name`\n```js\nsolr_doc.getFieldBoost(\"field_name\");\n```\n\n#### setFieldBoost\nThis method sets the boost for field name `field_name`\n```js\nsolr_doc.setFieldBoost('field_name', 2.121);\n```\n\n#### getFieldBoosts\nReturns a key-value object of all the fields and their boosts\n\n\n#### getFieldUpdate - For Solr 4.x\nThis method returns the update type ('set' or 'add') of `field_name`\n```js\nsolr_doc.getFieldUpdate(\"field_name\");\n```\n\n#### setFieldUpdate - For Solr 4.x\nThis method sets the update type ('set' or 'add') for field name `field_name`\n```js\nsolr_doc.setFieldUpdate('field_name', 'set');\n```\n\n#### getFieldUpdates - For Solr 4.x\nReturns a key-value object of all the fields and their update types\n\n\n#### getFieldDelete - For Solr 4.x\nThis method returns the delete setup for a `field_name`\n```js\nsolr_doc.getFieldDelete(\"field_name\");\n```\n\n#### setFieldDelete - For Solr 4.x\nThis method sets the field name `field_name` to delete from the Solr doc\n```js\nsolr_doc.setFieldDelete('field_name');\n```\n\n#### getFieldDeletes - For Solr 4.x\nReturns a key-value object of all the fields to delete from the Solr doc\n\n\n#### clear\nThis clears the all the `fields`, `fieldBoosts` as well as the `documentBoost`\n\n#### toXML\nThis method converts the current `helios.document` into a solr readable XML\n```js\nsolr_doc.toXML();\n```\n\n\nIssues\n======\nI know there are a lot of pending tasks and modifications required in this library.\nIf you find any bug or a feature that you want,\nplease submit an [issue](https://github.com/rishabhmhjn/helios/issues).\nI will respond to it as soon as I can and make required changes to it.\n\nIf you like this module, please do star it :)\n\n    npm star helios\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rishabhmhjn/helios.git"
  },
  "scripts": {
    "test": "node --expose_gc ./node_modules/nodeunit/bin/nodeunit test"
  },
  "version": "0.0.5"
}
